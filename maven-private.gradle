if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        // https://github.com/novoda/bintray-release/issues/71
        excludes = ['**/*.kt'] // < ---- Exclude all kotlin files from javadoc file.
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

// 强制 Java/JavaDoc 等的编码为 UTF-8
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
//    archives javadocJar
    archives sourcesJar
}


apply plugin: 'maven'
apply plugin: 'maven-publish'

// Maven Private Repo
repositories {
    maven { url 'https://github.com/GitLqr/maven_repository/raw/master/' }
}

// Maven Private Deploy
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
final def mavenLocalDir = properties.getProperty('maven.local.dir')
final def theGroup = publishedGroupId
final def version = libraryVersion
final def pbArtifactId = artifact

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri(mavenLocalDir))
            pom.groupId = theGroup
            pom.version = version
            pom.artifactId = pbArtifactId
        }
    }
}

def uploadArchivesTask = tasks.getByName("uploadArchives")
if (uploadArchivesTask != null) {
    def uploadArchivesCleanTask = tasks.create("uploadArchivesClean").doLast {
        clear_cache(file("${mavenLocalDir}/${theGroup.replace('.', '/')}/$pbArtifactId"))
        println("mavenLocalDir=$mavenLocalDir, theGroup=$theGroup, version=$version, pbArtifactId=$pbArtifactId")
    }
    uploadArchivesCleanTask.group(uploadArchivesTask.group)
    uploadArchivesTask.dependsOn(uploadArchivesCleanTask)
}

def clear_cache(file) {
    if (file.exists()) {
        file.deleteDir()
    }
}